#pragma once
//=====================================================================//
/*!	@file
	@brief	EEPROM マネージャー
	@author	平松邦仁 (hira@rvf-rc45.net)
*/
//=====================================================================//
#include <stdint.h>
#include <avr/eeprom.h>

namespace device {

	//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++//
	/*!
		@brief	EEPROM アクセス・クラス
	*/
	//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++//
	struct eeprom {

		//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++//
		/*!
			@brief	EEPROM スロット定義
		*/
		//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++//
		struct slot {
			//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++//
			/*!
				@brief	タイプ
			*/
			//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++//
			enum type {
				menu_pos,
			};
		};


		//-----------------------------------------------------------------//
		/*!
			@brief	コンストラクター
		*/
		//-----------------------------------------------------------------//
		eeprom() { }


		//-----------------------------------------------------------------//
		/*!
			@brief	アクセス可能か検査
			@return 可能なら「true」
		*/
		//-----------------------------------------------------------------//
		bool is_ready() const {
			return eeprom_is_ready() != 0;
		}


		//-----------------------------------------------------------------//
		/*!
			@brief	読み出し
			@param[in]	t	スロットタイプ
			@return 読み出しデータ
		*/
		//-----------------------------------------------------------------//
		uint8_t read(slot::type t) const {
			eeprom_busy_wait();
			return eeprom_read_byte(reinterpret_cast<const uint8_t*>(t));
		}


		//-----------------------------------------------------------------//
		/*!
			@brief	書き込み
			@param[in]	t	スロットタイプ
			@param[in]	data	書き込みデータ
			@param[in]	even	「false」なら同値でも書き込み
		*/
		//-----------------------------------------------------------------//
		void write(slot::type t, uint8_t data, bool even = true) const {
			if(even) {
				uint8_t d = read(t);
				if(d == data) return ;
			}
			eeprom_busy_wait();
			eeprom_write_byte(reinterpret_cast<uint8_t*>(t), data);
		}

	};
}
