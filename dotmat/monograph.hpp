#pragma once
//=====================================================================//
/*!	@file
	@breif	モノクローム・グラフィックス・クラス
	@author	平松邦仁 (hira@rvf-rc45.net)
*/
//=====================================================================//
#include <stdint.h>
#include <avr/pgmspace.h>

// LCD 128x64 の場合
// #define LCD128X64

// 16x16 dot matrix LED
#define LED16X16

// 漢字フォントを表示させる場合有効にする
// #define KANJI_FONTS

// 時間表示を行う場合
// #define TIME_FNC

#ifdef TIME_FNC
#include "time.h"
#endif

namespace graphics {

	//=================================================================//
	/*!
		@breif	ビットマップ描画クラス
	*/
	//=================================================================//
	class monograph {

#ifdef LCD128X64
		static const uint16_t fb_width_  = 128;
		static const uint16_t fb_height_ = 64;
#endif
#ifdef LED16X16
		static const uint16_t fb_width_  = 16;
		static const uint16_t fb_height_ = 16;
#endif
		uint8_t	fb_[fb_width_ * fb_height_ / 8];
		uint8_t	multi_byte_hi_;

#ifdef KANJI_FONTS
		// KANJI フォントをキャッシュする数
		static const int kanji_cash_size_ = 16;

		struct KANJI_CASH {
			uint8_t	sjis_hi;
			uint8_t	sjis_lo;
			uint8_t	bitmap[18];
		};
		KANJI_CASH kanji_cash_[kanji_cash_size_];
		uint8_t cash_first_;
#endif

	public:
		//-----------------------------------------------------------------//
		/*!
			@breif	コンストラクター
		*/
		//-----------------------------------------------------------------//
		monograph() { }


		//-----------------------------------------------------------------//
		/*!
			@breif	初期化
		*/
		//-----------------------------------------------------------------//
		void init();


		//-----------------------------------------------------------------//
		/*!
			@breif	横幅の取得
			@return 横幅
		*/
		//-----------------------------------------------------------------//
		uint16_t get_width() const { return fb_width_; }


		//-----------------------------------------------------------------//
		/*!
			@breif	高さの取得
			@return 高さ
		*/
		//-----------------------------------------------------------------//
		uint16_t get_height() const { return fb_height_; }


		//-----------------------------------------------------------------//
		/*!
			@breif	フレームバッファのアドレスを返す
			@return フレーム・バッファ・アドレス
		*/
		//-----------------------------------------------------------------//
		const uint8_t* fb() const { return fb_; }


		//-----------------------------------------------------------------//
		/*!
			@breif	点を描画する
			@param[in]	x	開始点Ｘ軸を指定
			@param[in]	y	開始点Ｙ軸を指定
		*/
		//-----------------------------------------------------------------//
		void point_set(int16_t x, int16_t y);


		//-----------------------------------------------------------------//
		/*!
			@breif	点を消去する
			@param[in]	x	開始点Ｘ軸を指定
			@param[in]	y	開始点Ｙ軸を指定
		*/
		//-----------------------------------------------------------------//
		void point_reset(int16_t x, int16_t y);


		//-----------------------------------------------------------------//
		/*!
			@breif	四角を塗りつぶす
			@param[in]	x	開始位置 X
			@param[in]	y	開始位置 Y
			@param[in]	w	横幅 
			@param[in]	h	高さ
			@param[in]	c	カラー
		*/
		//-----------------------------------------------------------------//
		void fill(int16_t x, int16_t y, int16_t w, int16_t h, uint8_t c);


		//-----------------------------------------------------------------//
		/*!
			@breif	全画面クリアをする
			@param[in]	c	クリアカラー 0:クリア 0!=:塗る
		*/
		//-----------------------------------------------------------------//
		void clear(uint8_t c);


		//-----------------------------------------------------------------//
		/*!
			@breif	線を描画する
			@param[in]	x1	開始点Ｘ軸を指定
			@param[in]	y1	開始点Ｙ軸を指定
			@param[in]	x2	終了点Ｘ軸を指定
			@param[in]	y2	終了点Ｙ軸を指定
			@param[in]	c	描画色
		*/
		//-----------------------------------------------------------------//
		void line(int16_t x1, int16_t y1, int16_t x2, int16_t y2, uint8_t c);


		//-----------------------------------------------------------------//
		/*!
			@breif	フレームを描画する
			@param[in]	x	開始点Ｘ軸を指定
			@param[in]	y	開始点Ｙ軸を指定
			@param[in]	w	横幅
			@param[in]	h	高さ
			@param[in]	c	描画色
		*/
		//-----------------------------------------------------------------//
		void frame(int16_t x, int16_t y, int16_t w, int16_t h, uint8_t c);


		//-----------------------------------------------------------------//
		/*!
			@breif	ビットマップイメージを描画する
			@param[in]	x	開始点Ｘ軸を指定
			@param[in]	y	開始点Ｙ軸を指定
			@param[in]	img	描画ソースのポインター
			@param[in]	w	描画ソースの幅
			@param[in]	h	描画ソースの高さ
		*/
		//-----------------------------------------------------------------//
		void draw_image_P(int16_t x, int16_t y, const uint8_t* img, uint8_t w, uint8_t h);


		//-----------------------------------------------------------------//
		/*!
			@breif	ビットマップイメージを描画する
			@param[in]	x	開始点Ｘ軸を指定
			@param[in]	y	開始点Ｙ軸を指定
			@param[in]	img	描画ソースのポインター
			@param[in]	w	描画ソースの幅
			@param[in]	h	描画ソースの高さ
		*/
		//-----------------------------------------------------------------//
		void draw_image(int16_t x, int16_t y, const uint8_t* img, uint8_t w, uint8_t h);


		//-----------------------------------------------------------------//
		/*!
			@breif	モーションオブジェクトを描画する
			@param[in]	x	開始点Ｘ軸を指定
			@param[in]	y	開始点Ｙ軸を指定
			@param[in]	img	描画ソースのポインター
		*/
		//-----------------------------------------------------------------//
		void draw_mobj_P(int16_t x, int16_t y, const uint8_t* img);


		//-----------------------------------------------------------------//
		/*!
			@breif	ascii フォントを描画する。
			@param[in]	x	開始点Ｘ軸を指定
			@param[in]	y	開始点Ｙ軸を指定
			@param[in]	code	ASCII コード（0x00 to 0x7F)
		*/
		//-----------------------------------------------------------------//
		void draw_font(int16_t x, int16_t y, char code);


		//-----------------------------------------------------------------//
		/*!
			@breif	ascii テキストを描画する。
			@param[in]	x	開始点Ｘ軸を指定
			@param[in]	y	開始点Ｙ軸を指定
			@param[in]	text	テキストのポインター
			@return 文字の終端座標（Ｘ）
		*/
		//-----------------------------------------------------------------//
		int16_t draw_string(int16_t x, int16_t y, const char* text);


		//-----------------------------------------------------------------//
		/*!
			@breif	ascii プログラム領域のテキストを描画する。
			@param[in]	x	開始点Ｘ軸を指定
			@param[in]	y	開始点Ｙ軸を指定
			@param[in]	text	テキストのポインター
			@return 文字の終端座標（Ｘ）
		*/
		//-----------------------------------------------------------------//
		int16_t draw_string_P(int16_t x, int16_t y, const char* text);


		//-----------------------------------------------------------------//
		/*!
			@breif	テキスト列を中心に描画する。
			@param[in]	text	テキストのポインター
		*/
		//-----------------------------------------------------------------//
		void draw_string_center_P(const char* text);


		//-----------------------------------------------------------------//
		/*!
			@breif	１６進数を表示する
			@param[in]	x	開始点Ｘ軸を指定
			@param[in]	y	開始点Ｙ軸を指定
			@param[in]	value	値（０～１５）
			@param[in]	num	表示数
			@param[in]	zero_suppress	ゼロサプレスを行う場合「true」
			@return 文字の終端座標（Ｘ）
		*/
		//-----------------------------------------------------------------//
		int16_t draw_hexadecimal(int16_t x, int16_t y, uint32_t value, uint8_t num = 0, bool zero_suppress = true);


		//-----------------------------------------------------------------//
		/*!
			@breif	１０進数を表示する
			@param[in]	x	開始点Ｘ軸を指定
			@param[in]	y	開始点Ｙ軸を指定
			@param[in]	value	値
			@param[in]	num	表示数
			@param[in]	zero_suppress	ゼロサプレスを行う場合「true」
			@param[in]	sign	符号表示を行う場合「true」
			@return 文字の終端座標（Ｘ）
		*/
		//-----------------------------------------------------------------//
		int16_t draw_decimal(int16_t x, int16_t y, int32_t value, uint8_t num = 0, bool zero_suppress = false, bool sign = false);


		//-----------------------------------------------------------------//
		/*!
			@breif	水平レベルを表示
			@param[in]	x	開始点Ｘ軸を指定
			@param[in]	y	開始点Ｙ軸を指定
			@param[in]	w	横幅
			@param[in]	h	高さ
			@param[in]	l	レベル
		*/
		//-----------------------------------------------------------------//
		void draw_holizontal_level(int16_t x, int16_t y, uint16_t w, uint16_t h, uint16_t l);


#ifdef TIME_FNC
		//-----------------------------------------------------------------//
		/*!
			@breif	日付表示 YYYY/MM/DD を行う
			@param[in]	x	開始点Ｘ軸を指定
			@param[in]	y	開始点Ｙ軸を指定
			@param[in]	t	tm 構造体
			@return 文字の終端座標（Ｘ）
		*/
		//-----------------------------------------------------------------//
		int16_t draw_date(int16_t x, int16_t y, const tm& t);


		//-----------------------------------------------------------------//
		/*!
			@breif	時間表示 HH/MM/SS を行う
			@param[in]	x	開始点Ｘ軸を指定
			@param[in]	y	開始点Ｙ軸を指定
			@param[in]	t	tm 構造体
			@return 文字の終端座標（Ｘ）
		*/
		//-----------------------------------------------------------------//
		int16_t draw_time(int16_t x, int16_t y, const tm& t);
#endif
	};
}
