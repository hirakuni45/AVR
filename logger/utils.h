#ifndef UTILS_H
#define UTILS_H
//=====================================================================//
/*!	@file
	@breif	色々なユーティリテー（ヘッダー）
	@author	平松邦仁 (hira@rvf-rc45.net)
*/
//=====================================================================//
#include <stdio.h>
#include <stdlib.h>
#include <avr/pgmspace.h>

#ifdef __cplusplus
extern "C" {
#endif

//-----------------------------------------------------------------//
/*!
	@breif	プログラム領域に置かれたテキスト（「0」ターミネート@n
			された複数アイテム）のアイテム数を数える。@n
			例：３つのアイテムがある場合	@n
				const prog_char* list = {	@n
					"Item1\0"				@n
					"Item2\0"				@n
					"Item3\0"				@n
				};							@n
			※↑の場合、３が帰る。			
	@param[in]	str	プログラム・エリアのポインター
	@return		アイテム数を返す
*/
//-----------------------------------------------------------------//
short scan_prog_text_num_P(const prog_char *str);


//-----------------------------------------------------------------//
/*!
	@breif	プログラム領域に格納たテキスト（「0」ターミネート	@n
			された複数アイテム）の指定したアイテムを取り出す。	@n
				const prog_char* list = {						@n
					"Item1\0"									@n
					"Item2\0"									@n
					"Item3\0"									@n
				};												@n
			※↑の場合、no:1 の答えとして、"Item2" のプログラム	@n
			領域ポインターが返る。								
	@param[in]	str	プログラム・エリアのポインター
	@param[in]	no	取り出す位置
	@return		プログラムエリアのポインター					@n
				※アイテム数より大きな位置を指定した場合、「0」	@n
				ターミネートされたプログラム領域のポインターが	@n
				返る。
*/
//-----------------------------------------------------------------//
const prog_char *get_prog_text_P(const prog_char *str, uint8_t no);


//-----------------------------------------------------------------//
/*!
	@breif	ユーティリティー・メニューの初期化@n
			・複数文字列を縦に並べて表示し、上下ボタンで選択させる@n
			インターフェースを持った、メニュー選択形式。
	@param[in]	str	プログラム領域に格納たテキスト（「0」ターミ@n
					ネートされた複数アイテム）のポインター
	@param[in]	batt	バッテリーインジケーターを表示する場合「１」
*/
//-----------------------------------------------------------------//
void util_menu_init(const prog_char *str, char batt);


//-----------------------------------------------------------------//
/*!
	@breif	メニューの幅を取得
	@return 最大幅
*/
//-----------------------------------------------------------------//
unsigned char util_menu_get_width(void);


//-----------------------------------------------------------------//
/*!
	@breif	メニューの高さを取得
	@return 最大幅
*/
//-----------------------------------------------------------------//
unsigned char util_menu_get_height(void);


//-----------------------------------------------------------------//
/*!
	@breif	メニューのセンターリングを禁止する
	@param[in]	bits	bit0 が横方向、bit1 が縦方向に対応
*/
//-----------------------------------------------------------------//
void util_menu_centerring_disable(char bits);


//-----------------------------------------------------------------//
/*!
	@breif	ユーティリティー・メニューの表示オフセットを設定
			※初期化後に呼ぶ事
	@param[in]	ofsx	X 軸のオフセット
	@param[in]	ofsy	Y 軸のオフセット
*/
//-----------------------------------------------------------------//
void util_menu_offset(char ofsx, char ofsy);


//-----------------------------------------------------------------//
/*!
	@breif	ユーティリティー・メニューの表示サイズを設定
			※初期化後に呼ぶ事
	@param[in]	ofsx	X 軸のオフセット
	@param[in]	ofsy	Y 軸のオフセット
*/
//-----------------------------------------------------------------//
void util_menu_size(unsigned char w, unsigned char h);


//-----------------------------------------------------------------//
/*!
	@breif	キャンセル・ボタンの判定
	@return キャンセル・ボタンが押されたら、「０」以外の値
*/
//-----------------------------------------------------------------//
char util_get_cancel(void);


//-----------------------------------------------------------------//
/*!
	@breif	ボタンがホールドされリピートされているか検査
	@return リピート状態ならメニュー位置を返す、リピート無しなら負の値
*/
//-----------------------------------------------------------------//
char util_menu_get_repeat();


//-----------------------------------------------------------------//
/*!
	@breif	ユーティリティー・メニュー・サービス@n
			※事前にメニューを「util_menu_init」を使って初期化して@n
			おく必要がある。
	@param[in]	mpos	メニュー表示と消す位置（-1の時無効）
	@return -1 の場合、選択中状態、正の整数の場合、選択されたメニュー
			位置。
*/
//-----------------------------------------------------------------//
char util_menu_service(char mpos);


//-----------------------------------------------------------------//
/*!
	@breif	文字列を特定のキャラクターコードで置き換える
	@param[in]	text	文字列のポインター
	@param[in]	font	置き換えるキャラコード
*/
//-----------------------------------------------------------------//
void util_text_font_fill(char *text, char font);


//-----------------------------------------------------------------//
/*!
	@breif	汎用的な数字の入力と、表示
	@param[in]	x	数字表示の X 軸
	@param[in]	y	数字表示の Y 軸
	@param[in]	ctrl
	@param[in]	min_limit	入力値の下限設定
	@param[in]	max_limit	入力値の上限設定
	@param[in]	val	値を格納するポインター
*/
//-----------------------------------------------------------------//
void util_input_number(short x, short y, char ctrl, short min_limit, short max_limit, short *val);


//-----------------------------------------------------------------//
/*!
	@breif	汎用的な文字列テーブルの選択と表示
	@param[in]	x	文字列表示の X 軸
	@param[in]	y	文字列表示の Y 軸
	@param[in]	ctrl	コントロール
	@param[in]	str	文字列のポインター（プログラム領域）
	@param[in]	val	値を格納するポインター
*/
//-----------------------------------------------------------------//
void util_input_str_P(short x, short y, char ctrl, const prog_char *str, char *val);


//-----------------------------------------------------------------//
/*!
	@breif	文字列をセンターに表示
	@param[in]	ofsx	X 軸オフセット
	@param[in]	ofsy	Y 軸オフセット
	@param[in]	text	文字列
*/
//-----------------------------------------------------------------//
void util_draw_text_center(char ofsx, char ofsy, const char* text);


//-----------------------------------------------------------------//
/*!
	@breif	文字列をセンターに表示
	@param[in]	ofsx	X 軸オフセット
	@param[in]	ofsy	Y 軸オフセット
	@param[in]	text	文字列
*/
//-----------------------------------------------------------------//
void util_draw_text_center_P(char ofsx, char ofsy, const prog_char* text);


	//-----------------------------------------------------------------//
	/*!
		@breif	エディット・ボックスの描画
		@param[in]	x	X 軸位置
		@param[in]	y	Y 軸位置
		@param[in]	w	横幅
		@param[in]	h	高さ
		@param[in]	c	カラー
	*/
	//-----------------------------------------------------------------//
	void util_draw_edit_box(short x, short y, uint8_t w, uint8_t h, char c);


#ifdef __cplusplus
};
#endif

#endif // UTILS_H
