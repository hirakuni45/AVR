#ifndef TIME_H
#define TIME_H
//=====================================================================//
/*!	@file
	@breif	時間関数（ヘッダー）
	@author	平松邦仁 (hira@rvf-rc45.net)
*/
//=====================================================================//

typedef unsigned long time_t;

// SUN:0 MON:1 THU:2 WED:3 THU:4 FRI:5 SAT:6

struct tm {
        int tm_sec;     /* seconds after the minute - [0,59] */
        int tm_min;     /* minutes after the hour - [0,59] */
        int tm_hour;    /* hours since midnight - [0,23] */
        int tm_mday;    /* day of the month - [1,31] */
        int tm_mon;     /* months since January - [0,11] */
        int tm_year;    /* years since 1900 */
        int tm_wday;    /* days since Sunday - [0,6] */
        int tm_yday;    /* days since January 1 - [0,365] */
        int tm_isdst;   /* daylight savings time flag */
        };

//-----------------------------------------------------------------//
/*!
	@breif	西暦から、その年がうるう年かを判定
	@param[in]	year	西暦
	@return		うるう年なら「0」以外
*/
//-----------------------------------------------------------------//
char check_leap_year(short year);


//-----------------------------------------------------------------//
/*!
	@breif	西暦と、月から、その月の最大日数を得る。
	@param[in]	year	西暦
	@param[in]	mon		月（0 to 11)
	@return		「月」に対応する最大日数
*/
//-----------------------------------------------------------------//
char get_mday(short year, char mon);


//-----------------------------------------------------------------//
/*!
	@breif	西暦から、その年の総日数を得る。
	@param[in]	year	西暦
	@return		「年」に対応する総日数
*/
//-----------------------------------------------------------------//
short get_yday(short year);


//-----------------------------------------------------------------//
/*!
	@breif	西暦、月から、1970 年からの総日数を得る。
	@param[in]	year	西暦 1970 〜
	@param[in]	mon		月	[0..11]
	@param[in]	day		日	[1..31]
	@return		1970 年1月1日からの総日数
*/
//-----------------------------------------------------------------//
long get_total_day(short year, char mon, char day);


//-----------------------------------------------------------------//
/*!
	@breif	世界標準時間（グリニッジ）からのオフセットを取得
	@return	オフセット時間（秒）
*/
//-----------------------------------------------------------------//
inline time_t get_timezone_offset(void);


//-----------------------------------------------------------------//
/*!
	@breif	世界標準時間（グリニッジ）から、tm 構造体のメンバー
			を生成する。
	@param[in]	tp
	@return		グローバル tm 構造体のポインター
*/
//-----------------------------------------------------------------//
struct tm *gmtime(const time_t *);


//-----------------------------------------------------------------//
/*!
	@breif	tm 構造体から、世界標準(グリニッジ)時間を得る@n
			※メンバー変数 tm_yday は再計算される。@n
			※メンバー変数 tm_wday は再計算される。@n
			※ tm_isdgt は無視される。
	@param[in]	tmp	tm 構造体のポインター@n
				※NULLの場合は、システムの構造体が使われる
	@return		GMT:1970年1月1日0時0分0秒(4:THU)からの経過時間（秒）
*/
//-----------------------------------------------------------------//
time_t mktime(const struct tm *);


//-----------------------------------------------------------------//
/*!
	@breif	このモジュールで利用している tm 構造体のポインターを得る。
	@return		tm 構造体のポインター
*/
//-----------------------------------------------------------------//
inline struct tm *get_tm(void);


//-----------------------------------------------------------------//
/*!
	@breif	曜日のテキストを返す。
	@param[in]	week	曜日インデックス（0 to 6)
	@return		曜日のテキスト・ポインター
*/
//-----------------------------------------------------------------//
inline const prog_char *get_week_text(uint8_t week);


//-----------------------------------------------------------------//
/*!
	@breif	月のテキストを返す。
	@param[in]	mon_index	月のインデックス（0 to 11)
	@return		月のテキスト・ポインター
*/
//-----------------------------------------------------------------//
inline const prog_char *get_mon_text(uint8_t mon);


//-----------------------------------------------------------------//
/*!
	@breif	時間と日付の表示
	@param[in]	sttm	時間構造体
*/
//-----------------------------------------------------------------//
void xprint_date(const struct tm* sttm);


#endif	// TIME_H
